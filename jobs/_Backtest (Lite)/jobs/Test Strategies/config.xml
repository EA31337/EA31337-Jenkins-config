<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.7">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.TextParameterDefinition>
          <name>Strategies</name>
          <description>Strategies to test.</description>
          <defaultValue>Alligator
Bands
DeMarker
Envelopes
Fractals
MA
MACD
RSI
SAR
WPR</defaultValue>
        </hudson.model.TextParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Year</name>
          <description>Year to backtest.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2015</string>
              <string>2014</string>
              <string>2013</string>
              <string>2012</string>
              <string>2011</string>
              <string>2010</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Months</name>
          <description>Months to test.</description>
          <defaultValue>1-12</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Deposit</name>
          <description>Account deposit to backtest.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2000</string>
              <string>10000</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Symbol</name>
          <description>Symbol to backtest.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>EURUSD</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Spread</name>
          <description>Spread to backtest.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>10</string>
              <string>20</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Digits</name>
          <description>Number of market digits.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>5</string>
              <string>4</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BT_Source</name>
          <description>Source of the tick data for backtesting.	</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>DS</string>
              <string>DS2</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Profile</name>
          <description>Select profile name to test.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>default</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BaseCurrency</name>
          <description>Base currency of the account.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>USD</string>
              <string>GBP</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.9.0">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.18">
    <script>def buildJob(strategy, period) {
    return build(job: &apos;Test Strategy&apos;, parameters: [string(name: &apos;Strategy&apos;, value: strategy), string(name: &apos;TestPeriod&apos;, value: period), string(name: &apos;Year&apos;, value: Year), string(name: &apos;Months&apos;, value: Months), string(name: &apos;Deposit&apos;, value: Deposit), string(name: &apos;Symbol&apos;, value: Symbol), string(name: &apos;Spread&apos;, value: Spread), string(name: &apos;Digits&apos;, value: Digits), string(name: &apos;BaseCurrency&apos;, value: BaseCurrency), string(name: &apos;BT_Source&apos;, value: BT_Source), string(name: &apos;Profile&apos;, value: Profile)], quietPeriod: 10)
}
@NonCPS
def addJobs(params) {
    def jobs = [:]
    println params
    params.split(&quot;\\r?\\n&quot;).each { param -&gt;
        println &quot;Adding ${param}...&quot;
        jobs[&quot;${param}&quot;] = { buildJob(&quot;${param}-${param}&quot;, &apos;M15&apos;) }
        jobs[&quot;${param}1&quot;] = { buildJob(&quot;${param}-${param}1&quot;, &apos;M1&apos;) }
        jobs[&quot;${param}5&quot;] = { buildJob(&quot;${param}-${param}5&quot;, &apos;M5&apos;) }
        jobs[&quot;${param}15&quot;] = { buildJob(&quot;${param}-${param}15&quot;, &apos;M15&apos;) }
        jobs[&quot;${param}30&quot;] = { buildJob(&quot;${param}-${param}30&quot;, &apos;M30&apos;) }
    }
    return jobs;
}
node {
    stage(&apos;Tests&apos;) {
        print &quot;Parameters: Year:${Year}, Months:${Months}, Deposit:${Deposit}, Symbol:${Symbol}, Spread:${Spread}, Digits:${Digits}, BaseCurrency:${BaseCurrency}, BT_Source:${BT_Source}, Profile:${Profile}&quot;
        def testJobs = addJobs(Strategies)
        parallel testJobs
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
</flow-definition>